#!/usr/bin/env ruby
#
#  Created on 2007-8-22.
#  Copyright (c) 2007. All rights reserved.

begin
  require 'rubygems'
rescue LoadError
  # no rubygems to load, so we fail silently
end

require 'optparse'

VERSION_NOTE = "SmallCage 0.0.1 - Lightweight CMS Package."
OPTIONS = {}

OptionParser.new do |opts|

  opts.banner =<<BANNER
Usage: #{File.basename($0)} <subcommand> [options]
#{VERSION_NOTE}
Options are:
BANNER

  opts.separator ""
  opts.on("-h", "--help", "Show this help message.") do
    puts opts
    exit
  end
  opts.on("-v", "--version", "Show version info.") do
    puts VERSION_NOTE
    exit
  end

  subparsers = Hash.new do |h,k|
    $stderr.puts "no such subcommand: #{k}"
    exit 1
  end
  
  subparsers[:update] = OptionParser.new do |subp|
    subp.banner =<<EOT
Usage: update [PATH]
EOT
  end
  subparsers[:generate] = OptionParser.new do |subp|
  end
  subparsers[:release] = OptionParser.new do |subp|
  end
  subparsers[:help] = OptionParser.new do |subp|
  end

  commands = Hash.new {|h,k| k}
  commands[:up] = :update
  commands[:gen] = :generate
  commands[:rel] = :release

  opts.order!(ARGV)
  unless ARGV.empty?
    OPTIONS[:command] = commands[ARGV.shift.to_sym]
    subparsers[OPTIONS[:command]].parse!(ARGV)
  end
  
  if OPTIONS[:command].nil?
    puts opts
    exit
  elsif OPTIONS[:command] == :help
    subcmd = ARGV.shift
    if subcmd.nil?
      puts opts
    else
      puts subparsers[subcmd.to_sym]
    end
    exit
  elsif OPTIONS[:command] == :update
    OPTIONS[:path] = ARGV.shift 
    OPTIONS[:path] ||= "."
  end
end

p OPTIONS[:path]